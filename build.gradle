// Querydsl 추가
buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}
// Querydsl 추가 끝

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	//querydsl 추가
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

	// jacoco
	id 'jacoco'
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	//토큰
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	//스웨거
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'

	//템플릿 관련
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

	// db
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// oauth + security
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

	//lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	//email
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// request dto 필드 유효성 검사
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Querydsl 추가
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'  // Test 이후 커버리지가 동작하도록 finalizedBy 추가
}

jacoco {
	toolVersion = '0.8.8'
}

// 바이너리 커버리지 결과를 사람이 읽기 좋은 형태의 리포트로 저장
jacocoTestReport {
	dependsOn test
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled true

		// html 파일 위치 지정
		html.destination file('build/reports/myReport.html')
	}

	def Qdomains = []
	for (qPattern in '**/QA'..'**/QZ') {
		Qdomains.add(qPattern + '*')
	}


	// 리포트 작성 시 특정 파일 제외
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/MyacademyApplication*',
							'**/*Request*',
							'**/*Response*',
							'**/Swagger*',
							'**/JpaAuditingConfig*',
							'**/controller'
					] + Qdomains)
				})
		)
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

// 내가 원하는 커버리지 기준을 만족하는지 확인해 주는 task
// 점수 평가 및 검증 단계
jacocoTestCoverageVerification {

	def Qdomains = []
	for (qPattern in '**/QA'..'**/QZ') {
		Qdomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			enabled = true // 활성화
			element = 'CLASS' // 클래스 단위로 커버리지 체크
			// includes = []

			// 라인 커버리지 제한을 80%로 설정
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 브랜치 커버리지 제한을 80%로 설정
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 200
			}
			excludes = [
					'**.*ProjectApplication*',
					'**.*Request*',
					'**.*Response*',
					'**.*Swagger*',
					'**.*PasswordEncoder*',
					'**.*JpaAuditing*',
					'**.controller'
			] + Qdomains
		}
	}
}

//Querydsl 추가

def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

// Querydsl 추가 끝