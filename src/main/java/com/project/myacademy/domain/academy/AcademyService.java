package com.project.myacademy.domain.academy;

import com.project.myacademy.domain.academy.dto.*;
import com.project.myacademy.domain.employee.EmployeeRepository;
import com.project.myacademy.domain.parent.ParentRepository;
import com.project.myacademy.domain.student.StudentRepository;
import com.project.myacademy.global.exception.AppException;
import com.project.myacademy.global.exception.ErrorCode;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
@Slf4j
public class AcademyService {

    private final AcademyRepository academyRepository;


//    private final EmployeeRepository employeeRepository;
//    private final BCryptPasswordEncoder bCryptPasswordEncoder;
//
//    @Value("${jwt.token.secret}")
//    private String secretKey;
//    private long expiredTimeMs = 1000 * 60 * 60;

    /**
     * ÌïôÏõê Îì±Î°ù
     *
     * @param request
     * @return AcademyDto
     */
//    @Transactional
//    public AcademyDto createAcademy(CreateAcademyRequest request) {
//
//        // ÏöîÏ≤≠Ïùò Îì±Î°ùÎ≤àÌò∏ Ï∂îÏ∂ú
//        String businessRegistrationNumber = request.getBusinessRegistrationNumber();
//        log.info("ÏöîÏ≤≠ÏóêÏÑú Îì±Î°ùÎ≤àÌò∏Î•º Ï∂îÏ∂úÌñàÏäµÎãàÎã§.");
//
//        // Îì±Î°ùÎ≤àÌò∏Î°ú Ï†ÄÏû•ÏÜåÏóêÏÑú Ï∞æÏïÑÎ≥¥Í≥† Ï§ëÎ≥µ Ïãú ÏóêÎü¨ Î∞úÏÉù
//        log.info("Îì±Î°ùÎ≤àÌò∏Î°ú Ï†ÄÏû•ÏÜåÏóêÏÑú ÌïôÏõêÏ†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.");
//        academyRepository.findByBusinessRegistrationNumber(businessRegistrationNumber)
//                .ifPresent(academy -> {
//                    throw new AppException(ErrorCode.DUPLICATED_ACADEMY);
//                });
//        log.info("ÌïôÏõêÏ†ïÎ≥¥Î•º Ï†ÄÏû•ÏÜåÏóêÏÑú Ï°∞ÌöåÌñàÏäµÎãàÎã§.");
//
//        // ÌïôÏõêÏùÑ Ï†ÄÏû•ÏÜåÏóê Îì±Î°ù
//        log.info("ÌïôÏõêÏ†ïÎ≥¥Î•º Ï†ÄÏû•ÏÜåÏóê Îì±Î°ùÌï©ÎãàÎã§.");
////        Academy savedAcademy = academyRepository.save(request.toAcademy(bCryptPasswordEncoder.encode(request.getPassword())));
//        log.info("ÌïôÏõêÏ†ïÎ≥¥Í∞Ä Ï†ÄÏû•ÏÜåÏóê Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.");
//
//        return savedAcademy.toAcademyDto();
//    }

//    /**
//     * ÌïôÏõê Ï†ïÎ≥¥ ÏàòÏ†ï
//     *
//     * @param academyId
//     * @param reqeust
//     * @param name
//     * @return AcademyDto
//     */
//    @Transactional
//    public AcademyDto updateAcademy(Long academyId, UpdateAcademyReqeust reqeust, String name) {
//
//        // Ïù∏Ï¶ù ÌôïÏù∏
//        log.info("Ïù∏Ï¶ùÏ†ïÎ≥¥Î°ú Ï†ÄÏû•ÏÜåÏóêÏÑú Í≥ÑÏ†ïÏ†ïÎ≥¥Î•º ÌôïÏù∏Ìï©ÎãàÎã§.");
//        Employee employee = employeeRepository.findByName(name)
//                .orElseThrow(() -> new AppException(ErrorCode.ACCOUNT_NOT_FOUND));
//        log.info("Í≥ÑÏ†ïÏ†ïÎ≥¥Í∞Ä ÌôïÏù∏ÎêòÏóàÏäµÎãàÎã§.");
//
//        // academyIdÎ°ú ÌïôÏõêÏ†ïÎ≥¥  ÌôïÏù∏
//        log.info("academyIdÎ°ú Ï†ÄÏû•ÏÜåÏóêÏÑú ÌïôÏõêÏ†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.");
//        Academy academy = academyRepository.findById(academyId)
//                .orElseThrow(() -> new AppException(ErrorCode.ACADEMY_NOT_FOUND));
//        log.info("Ï†ÄÏû•ÏÜåÏóêÏÑú ÌïôÏõêÏ†ïÎ≥¥Í∞Ä Ï°∞ÌöåÎêòÏóàÏäµÎãàÎã§.");
//
//        // Í∂åÌïú ÌôïÏù∏
//        log.info("ÌïôÏõêÏ†ïÎ≥¥Ïùò ÏÜåÏú†ÏûêÏôÄ Ïù∏Ï¶ùÏ†ïÎ≥¥Î°ú Í∂åÌïúÏùÑ ÌôïÏù∏Ìï©ÎãàÎã§.");
//        if (!academy.getOwner().equals(name) && !employee.getEmployeeRole().equals(EmployeeRole.ROLE_ADMIN)) {
//            throw new AppException(ErrorCode.INVALID_PERMISSION);
//        }
//        log.info("Í∂åÌïúÏù¥ ÌôïÏù∏ÎêòÏóàÏäµÎãàÎã§.");
//
//        // ÌïôÏõê Ï†ïÎ≥¥ ÏàòÏ†ï
//        log.info("ÌïôÏõêÏ†ïÎ≥¥Î•º ÏàòÏ†ïÌïòÍ≤†ÏäµÎãàÎã§.");
//        academy.update(reqeust);
//        log.info("ÌïôÏõêÏ†ïÎ≥¥Î•º ÏàòÏ†ïÌïòÏòÄÏäµÎãàÎã§.");
//
//        // ÌïôÏõê Ï†ïÎ≥¥ Ï†ÄÏû•
//        log.info("ÏàòÏ†ïÎêú ÌïôÏõêÏ†ïÎ≥¥Î•º Ï†ÄÏû•ÌïòÍ≤†ÏäµÎãàÎã§.");
//        Academy updatedAcademy = academyRepository.save(academy);
//        log.info("ÏàòÏ†ïÎêú ÌïôÏõêÏ†ïÎ≥¥Î•º Ï†ÄÏû•ÌïòÍ≤†ÏäµÎãàÎã§.");
//
//        return updatedAcademy.toAcademyDto();
//    }

    /**
     * ÌïôÏõê ÏÇ≠Ï†ú
     *
     * @param academyId
     * @return Long
     */
    @Transactional
    public Long deleteAcademy(Long academyId) {


        Academy academy = academyRepository.findById(academyId)
                .orElseThrow(() -> new AppException(ErrorCode.ACADEMY_NOT_FOUND));

        log.info("ÌïôÏõêÏ†ïÎ≥¥Î•º ÏÇ≠Ï†úÌïòÍ≤†ÏäµÎãàÎã§.");
        academyRepository.delete(academy);
        log.info("ÌïôÏõêÏ†ïÎ≥¥Î•º ÏÇ≠Ï†úÌïòÏòÄÏäµÎãàÎã§.");

        return academyId;
    }



    public FindAcademyResponse findAcademy(FindAcademyRequest request) {
        String requestAcademyName = request.getName();
        log.info("üîé Ï∞æÏúºÎ†§Îäî ÌïôÏõê Ïù¥Î¶Ñ [{}] ", requestAcademyName);

        // Í≤ÄÏÉâÌïòÎ†§Îäî ÌïôÏõê Îç∞Ïù¥ÌÑ∞Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå
        Academy academy = academyRepository.findByName(requestAcademyName)
                .orElseThrow(() -> {
                    throw new AppException(ErrorCode.ACADEMY_NOT_FOUND);
                });

        FindAcademyResponse response = new FindAcademyResponse(academy.getId());

        return response;

    }

    public Page<ReadAcademyResponse> readAllAcademies(Pageable pageable) {

        return academyRepository.findAll(pageable).map(academy -> new ReadAcademyResponse(academy));
    }

    @Transactional
    public CreateAcademyResponse createAcademy(CreateAcademyRequest request) {

        //Í∞ôÏùÄ Ïù¥Î¶Ñ ÌïôÏõêÏùÄ ÌóàÏö©ÌïòÏßÄ ÏïäÎäîÎã§.
        academyRepository.findByName(request.getName())
                .ifPresent(academy -> {
                    throw new AppException(ErrorCode.DUPLICATED_ACADEMY);
                });

        Academy savedAcademy = academyRepository.save(Academy.createAcademy(request));
        log.info("‚ú® ÌïôÏõê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏÑ±Í≥µ");

        return new CreateAcademyResponse(savedAcademy);
    }

    public boolean checkExistByAcademyName(String academyName) {
        return academyRepository.existsByName(academyName);
    }
}
